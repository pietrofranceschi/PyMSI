import click
import pymsilib



@click.group()
@click.version_option()
def cli():
    """PyMSI:
        The package contains utiliteis to analyze the results of
        MSI experiments saved as ImzML files
    """
    pass

@cli.command()
@click.option('--filename', help = "ImzML file name", type = str)
@click.option('--mzs', help = "mz of interest, comma separated",  type = str )
@click.option('--tol', default = 1.0, help = "Tolerance for the extraction of the EIT", type = float)
@click.option('--outdir', default = 'EIT', help = "Where to store the EITs", type = str)
def getionimages(filename, mzs, tol, outdir):
    """
    Exract from a ImzML file a series of extracted ion images
    and store them into separate files
    """
    chiesimsilib.getionimages(filename,mzs,tol,outdir)

@cli.command()
@click.option('--optical', help = "image file (read into with matplotlib)", type = str)
@click.option('--EIT', help = "csv file containing the mz image", type = str)
def hook(optical,EIT):
    '''
    Identify (and save) a series of reference points
    between an optical image and a specific MS image. The coordinates
    of the points are saved into a txt (tissue.tis) file

    Keyword arguments:
    optical  --  the name of the image file with the optical image
    EIT -- the file name of the csv containing the mz image
    '''
    chiesimsilib.hook(optical,EIT)


@cli.command()
@click.option('--hooks', help = ".tis file generated by the hook command", type = str)
@click.option('--optical', help = "image file (read into with matplotlib)", type = str)
@click.option('--EIT', help = "csv file containing the mz image", type = str)
@click.option('--EITfolder', default = '',help = "folder containing the set of EITs", type = str)
@click.option('--outdir', default = 'EITwarp', help = "Where to store the transformed EITs", type = str)
def transform(hooks,opticalimage,EIT,EITfolder,outdir):
    '''
    Estimate and perform the affine transformation of one (or more) EIT images
    on the bases of a set of hook points. EIT images are resampled to match
    the size of the optical image
    '''
    chiesimsilib.transform(hooks,opticalimage,EIT,EITfolder,outdir)
